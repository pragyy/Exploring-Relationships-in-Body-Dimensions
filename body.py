# -*- coding: utf-8 -*-
"""Body.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jZQWK-lK8fL7UZHjjFRQ0lYbxJd8H7w8
"""

#import required packages
import pandas as pd
from math import sqrt, pow

# read the excel dataset
df = pd.read_excel('body.xlsx')
df.head(3)

"""## Body Mass Index (BMI)

BMI is given by the formula
BMI = weight/(height)^2

here, weight is in kgs and height is in meters.
"""

# height is given in cms so we will first convert height into meters.
df['height_meters'] = df.apply(lambda x: x['height']/100, axis = 1)

#calculate bmi
df['bmi'] = df.apply(lambda x: (x['weight']/(x['height_meters'])*(x['height_meters'])), axis=1 )

"""## CPA

CPA = -110 + 1.34(chest_diameter) + 1.54(chest_depth) +1.20(bitrochanteric_diameter) + 1.11(wrist_girth) + 1.15(ankle_girth) + 0.177(height) 
"""

df['cpa'] = df.apply(lambda x: (-110 + 1.34*x['chest_diameter']+ 1.54*x['chest_depth'] +1.20*x['bitrochanteric_diameter'] + 1.11*x['wrist_minimum_girth'] + 1.15*x['ankle_minimum_girth'] + 0.177*x['height']), axis=1)

"""#Regression and Correlation"""

# retrieving the required dataset.
df_1 = pd.DataFrame(data = df, columns=['age','bmi'])
df_2 = pd.DataFrame(data = df, columns=['weight', 'cpa'])

"""## Least squares and correlation

To calculate the least squares line, we need to calculate the following values from the data:



*   **sumx** and **sumy** : the sum of all X values and sum of all Y values.
*   **sumxy** : the sum of all the products of each corresponding X,Y pair.
*   **sumx_squared** and **sumy_squared** : the sum of square of every X value and the sum of square of every Y value 
*   **N** : the number of pairs


*slope = (N * sumxy - (sumx * sumy)) / (N * sumx_squared - (sumx)^2)*

*intercept = (sumy - (slope * sumx)) / N*

*correlation = (N * sumxy - (sumx * sumy)) / sqrt ((sumx_squared - (sumx)^2) * (sumy_squared - (sumy)^2))*
"""

#defining the function to calculate slope, intercept, and correlation
def reg_and_corr(df, x, y):

  #calculate sumx and sumy
  sumx = df[x].sum()
  sumy = df[y].sum()

  #calculate sumxy
  df[x+ '*' +y] = df.apply(lambda z: z[x] * z[y], axis=1)
  sumxy = df[x+ '*' +y].sum()  

  #calculate x^2 and y^2 for each cell
  df[x + '*' + x] = df.apply(lambda z: z[x] * z[x], axis=1)
  df[y + '*' + y] = df.apply(lambda z: z[y] * z[y], axis=1)

  #taking summation of the x^2 and y^2 (calculate above) to calculate sumx_squared and sumy_squared 
  sumx_squared = df[x + '*' + x].sum()
  sumy_squared = df[y + '*' + y].sum()

  #counting the number of rows in dataframe
  N = df.shape[0]

  #calculate slope
  slope = ((N * sumxy) - (sumx * sumy)) / ((N * sumx_squared) - pow(sumx,2)) 

  #calculate intercept
  intercept = (sumy - (slope * sumx)) / N

  #calculate correlation
  correlation = (N * sumxy - (sumx * sumy)) / sqrt ((sumx_squared - pow(sumx, 2)) * (sumy_squared - pow(sumy,2)))

  return slope, intercept, correlation

"""## Regression between Age and BMI

Age values will be x and BMI values will be y.
"""

s_1, i_1, corr_1 =  reg_and_corr(df_1, 'age', 'bmi')
print(s_1, i_1, corr_1)

"""## Regression between Weight and CPA

Weight values will be x and CPA values will be y.
"""

s_2, i_2, corr_2 = reg_and_corr(df_2, 'weight', 'cpa')
print(s_2, i_2, corr_2)

"""#Plots"""

# import required packages
import matplotlib.pyplot as plt
import numpy as np

plt.scatter(df_1['age'], df_1['bmi'])
x = np.array(df_1['age'])
y = s_1 * x + i_1
plt.plot(x,y, '-r','--')
plt.xlabel('Age')
plt.ylabel('BMI')
plt.show()

plt.scatter(df_2['weight'], df_2['cpa'])
x = np.array(df_2['weight'])
y = s_1 * x + i_1
plt.plot(x,y, '-r','--')
plt.xlabel('weight')
plt.ylabel('CPA')
plt.show()